Idea:
- Generate all subsets
- Save them in a map with their sum as the key
- Sort out the ones where 47 is not the key
- Check so there are no repeated ints. That one indes is not use severall times

Explanation:
sum_arr:
This function takes an array ans sums all of the elemets together

get_subsets:        source: "Inside Code" on youtube (How to generate subsets of an array - inside code)
Takes an array and generates all subsets in that array.
It takes the starting set(s), copies it, and adds the new element to them

-----------------------------------------------------------------

Goal: Find continuous subsequences in a given sequence

Method: Have an window(subsequence) to focus on at a time

Sudo-code:
if sum is above 47 -> "remove" first index in window

if sum is below 47 -> include next index

exclude:
current subsequence[:1]

include:
current subsequence +1

Edgecase: index 0 < 0
- If the first element in the subsequence is < 0, check with and without it
- if a single element is over 47

---------------------------------------------------------------------------------------

Find the goal, then go back until the element is different
so, while i == 0 -> arr[index-1]
if element == goal -> continue
elif element <= goal -> break and count upwards

while index != goal
conuter ++

------------------------------------------------------------------

elementet i listen - index man er på = 47

elementet i listen = 47 + index man er på

--------------------------------------------------
make_prefix -> make it take amount
